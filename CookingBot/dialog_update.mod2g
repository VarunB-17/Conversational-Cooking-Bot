use dialogue as knowledge.
use patterns as knowledge.
use cooking as knowledge.
use recipes as knowledge.
use text as knowledge.
use html as knowledge.
use dialogflow as actionspec.
use updateSession as module.

% This module is used for handling events and user related input.
module dialog_update {

	% Before processing any intents, check for completion of sequence, and, 
	% if so, add new empty sequence.
	if bel(session([ Sequence | _]), completedPattern(Sequence)) 
		then startNewSequence.
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%%% Percept processing                %%%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	%%% Handling of event waiting logic.
	forall percept(event(E)), not(bel(event(E))) do insert(event(E)).
	forall bel(event(E)), not(percept(event(E))) do delete(event(E)).
	if percept(event('TextStarted'), event('TextDone')) then delete(event('TextDone')). % workaround
	forall bel(event(E), waitingForEvent(E)) do delete(waitingForEvent(E)).
	
	%%% Handling of buttons / touch

	% Handling of Start button
	if percept(answer('Start')), bel(html('', Html))
		then delete(waitingForStartButton) + renderPage(Html).
	
	% If agent expects user to say something, introduce button for initiating talk.
	if not(bel(waitingForEvent(_))),
		bel(expectedIntent(user, _), lastAddedIntentTriple([_, Intent, _]), text(Intent, Txt),
			myPastaAglioPage(Txt, 'Talk', Html)) % NB: ad hoc layout used here!!!
		then renderPage(Html).
	% If user presses Talk button, then start listening for 15 seconds.
	if percept(answer('Talk')) then startListening(15, '').
	
	%%% Handling of recognized intents
	
	% If an intent is perceived, somebody must have been talking. As we only want to process one
	% intent at each turn. Therefore, if the mic is still open we close it and stop listening.
	if percept(intent(_, _, _, _, _)) then stopListening.

	% Update agent's memory (recording user inputs)
	% We take a simple approach for now, not taking context into account, where:
	% - all new parameters are added to the memory;
	% - all parameters that already were in the memory are overwritten
	if percept(intent(_, Params, _, _, _)), bel(updateMemory(Params, OldMemory, NewMemory)) 
		then delete(memory(OldMemory)) + insert(memory(NewMemory)).
	
	% Dialogflow intent percept (ignoring confidence and source parameters)
	if percept(intent(Intent, Params, _, Txt, _)), not(bel(Intent= '')) 
		then updateSession(user, Intent, Params, Txt).
	% If no intent was recognized but there is text, treat this as a default fallback intent
	% that will trigger repair
	if percept(intent('', _, _, Txt, _))
		then updateSession(user, defaultFallback, [], Txt).
}